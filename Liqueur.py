#!/usr/bin/env python3
import os
import sys
import platform
from pathlib import Path
import json
import shutil
import stat
import time
import requests
import zipfile
import subprocess
import winreg
from typing import Optional, List
from urllib.parse import urlparse

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ALLOWED_ORG = "Liqueur-Manager"
BASE_GITHUB_URL = "https://github.com"
PACKAGES_DIR = Path("/Liqueur_Packages") if platform.system() != "Windows" else Path("C:/Liqueur_Packages")
PACKAGES_JSON = PACKAGES_DIR / "packages.json"
AUTORUN_KEY = r"Software\Microsoft\Windows\CurrentVersion\Run"


def print_help():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    help_text = """
Liqueur Package Manager - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  install <—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π> [--name <–∏–º—è>]  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞
  uninstall <–∏–º—è_–ø–∞–∫–µ—Ç–∞>                –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
  list                                   –°–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
  help                                   –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  Liqueur install MyRepo
  Liqueur install MyRepo --name MyApp
  Liqueur uninstall OldApp
"""
    print(help_text)


def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥—ã"""
    try:
        if platform.system() == "Darwin":
            test_path = Path("/Liqueur_Packages/test_write")
            try:
                test_path.parent.mkdir(exist_ok=True, parents=True)
                test_path.touch()
                test_path.unlink()
            except PermissionError:
                print("üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ SIP. –ò—Å–ø–æ–ª—å–∑—É—é –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é...")
                global PACKAGES_DIR, PACKAGES_JSON
                PACKAGES_DIR = Path.home() / "Liqueur_Packages"
                PACKAGES_JSON = PACKAGES_DIR / "packages.json"

        PACKAGES_DIR.mkdir(exist_ok=True, parents=True)
        if not PACKAGES_JSON.exists():
            with open(PACKAGES_JSON, 'w') as f:
                json.dump({}, f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)


def add_to_autostart(app_name: str, file_path: Path):
    if platform.system() != "Windows":
        return False
    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, AUTORUN_KEY, 0, winreg.KEY_SET_VALUE)
        winreg.SetValueEx(key, app_name, 0, winreg.REG_SZ, str(file_path))
        winreg.CloseKey(key)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É: {e}")
        return False


def remove_from_autostart(app_name: str):
    if platform.system() != "Windows":
        return False
    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, AUTORUN_KEY, 0, winreg.KEY_SET_VALUE)
        winreg.DeleteValue(key, app_name)
        winreg.CloseKey(key)
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False


def parse_options(pkg_path: Path) -> dict:
    options = {
        "install_name": None,
        "launch_file": None,
        "autorun": False,
        "dependencies": [],
        "add_to_path": False,
        "downloadable": True,
        "official": True,
        "commands": []
    }

    option_file = pkg_path / "option.txt"
    if not option_file.exists():
        return options

    with open(option_file, 'r') as f:
        lines = [line.split('#')[0].strip() for line in f.readlines() if line.strip()]

        if len(lines) > 0 and lines[0].startswith("Name:"):
            options["install_name"] = lines[0].split("Name:")[1].strip().strip('"')

        if len(lines) > 1 and lines[1].startswith("File:"):
            options["launch_file"] = lines[1].split("File:")[1].strip().strip('"')

        if len(lines) > 2:
            options["autorun"] = "true" in lines[2].lower()

        if len(lines) > 3:
            try:
                options["dependencies"] = json.loads(lines[3])
            except:
                pass

        if len(lines) > 4:
            options["add_to_path"] = "true" in lines[4].lower()

        if len(lines) > 5:
            options["downloadable"] = "true" in lines[5].lower()

        if len(lines) > 6:
            options["official"] = "true" in lines[6].lower()

        if len(lines) > 7:
            try:
                options["commands"] = json.loads(lines[7])
            except:
                pass

    return options


def install_dependencies(dependencies: List[str], pkg_path: Path):
    if not dependencies:
        return

    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã
    pip_command = [sys.executable, "-m", "pip", "install"]
    if platform.system() == "Linux":
        pip_command.append("--user")

    for dep in dependencies:
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 'python' —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            if dep.lower() == "python":
                print("‚ÑπÔ∏è Python —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                continue

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PyQt6
            if dep.lower() in ["pyqt6", "pyqt6-tools"]:
                print(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}...")

                # –î–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                if platform.system() == "Linux":
                    try:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                        subprocess.run(["sudo", "apt-get", "install", "-y", "python3-pyqt6"],
                                       check=True)
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ pip —Å –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        subprocess.run([*pip_command, "PyQt6"], check=True)
                else:
                    # –î–ª—è Windows/MacOS –∏—Å–ø–æ–ª—å–∑—É–µ–º pip
                    subprocess.run([*pip_command, "PyQt6"], check=True)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tools –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if dep.lower() == "pyqt6-tools":
                    subprocess.run([*pip_command, "pyqt6-tools"], check=True)

                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {dep}")
                continue

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if dep.startswith(f"{ALLOWED_ORG}/"):
                repo_name = dep.split("/")[1]
                install_package(repo_name)
            else:
                print(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}...")
                subprocess.run([*pip_command, dep], check=True)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {dep}")

        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {dep}. –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                # 1. –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å pip
                subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"],
                               check=True)

                # 2. –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏
                subprocess.run([*pip_command, "--no-cache-dir", "--force-reinstall", dep],
                               check=True)

                print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {dep}")
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {dep}:")
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: {str(e)}")
                print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
                print(f"   pip install {dep}")

                # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥ –æ—à–∏–±–∫–∏
                with open(pkg_path / "install_errors.log", "a") as log_file:
                    log_file.write(f"Failed to install {dep}: {str(e)}\n")

def download_repo(repo_name: str, target_dir: Path) -> bool:
    try:
        url = f"{BASE_GITHUB_URL}/{ALLOWED_ORG}/{repo_name}/archive/refs/heads/main.zip"
        response = requests.get(url, stream=True)
        response.raise_for_status()

        zip_path = target_dir.with_suffix('.zip')
        with open(zip_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)

        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(target_dir.parent)

        extracted_dir = target_dir.parent / f"{repo_name}-main"
        if extracted_dir.exists():
            extracted_dir.rename(target_dir)

        zip_path.unlink()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        if 'zip_path' in locals() and zip_path.exists():
            zip_path.unlink()
        return False


def force_remove(path: Path, retries: int = 3, delay: float = 1.0) -> bool:
    for attempt in range(retries):
        try:
            for root, dirs, files in os.walk(path):
                for name in files:
                    file_path = Path(root) / name
                    file_path.chmod(stat.S_IWRITE)
                for name in dirs:
                    dir_path = Path(root) / name
                    dir_path.chmod(stat.S_IWRITE)
            shutil.rmtree(path)
            return True
        except Exception:
            time.sleep(delay)

    try:
        shutil.rmtree(path, ignore_errors=True)
        return True
    except:
        return False


def validate_repo_url(repo_url: str) -> bool:
    try:
        parsed = urlparse(repo_url)
        return parsed.netloc.endswith("github.com") and \
            parsed.path.strip("/").split("/")[0] == ALLOWED_ORG
    except:
        return False


def normalize_repo_url(repo_input: str) -> str:
    if repo_input.startswith(("http://", "https://")):
        return repo_input
    return f"{BASE_GITHUB_URL}/{ALLOWED_ORG}/{repo_input}"


def get_installed_packages() -> dict:
    try:
        with open(PACKAGES_JSON, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_package_info(name: str, repo_url: str):
    packages = get_installed_packages()
    packages[name] = {
        "repo_url": repo_url,
        "path": str(PACKAGES_DIR / name),
        "installed_at": time.strftime("%Y-%m-%d %H:%M:%S")
    }
    with open(PACKAGES_JSON, 'w') as f:
        json.dump(packages, f, indent=4)


def execute_commands(commands: List[str], pkg_path: Path):
    if not commands:
        return

    print("‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    os.chdir(pkg_path)

    for cmd in commands:
        try:
            print(f"$ {cmd}")
            if any(danger in cmd.lower() for danger in ["rm", "del", "format", "taskkill"]):
                confirm = input(f"‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–∞—Å–Ω—É—é –∫–æ–º–∞–Ω–¥—É? (y/n): ")
                if confirm.lower() != 'y':
                    continue

            subprocess.run(cmd, shell=True, check=True)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {cmd}\n{str(e)}")


def install_package(repo_input: str, name: Optional[str] = None):
    try:
        repo_url = normalize_repo_url(repo_input)
        if not validate_repo_url(repo_url):
            print(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å {ALLOWED_ORG}")
            return

        repo_name = repo_url.split("/")[-1]
        temp_dir = PACKAGES_DIR / f"temp_{repo_name}"

        if temp_dir.exists():
            shutil.rmtree(temp_dir)

        print(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ '{repo_name}'...")
        if not download_repo(repo_name, temp_dir):
            return

        options = parse_options(temp_dir)

        if not options["official"]:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ù–ï –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/n): ")
            if confirm.lower() != 'y':
                shutil.rmtree(temp_dir)
                return

        if not options["downloadable"]:
            print(f"‚ùå –ü–∞–∫–µ—Ç '{repo_name}' –∑–∞–ø—Ä–µ—â—ë–Ω –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é")
            shutil.rmtree(temp_dir)
            return

        pkg_name = name or options["install_name"] or repo_name
        target_dir = PACKAGES_DIR / pkg_name

        if target_dir.exists():
            print(f"‚ö†Ô∏è –ü–∞–∫–µ—Ç '{pkg_name}' —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            shutil.rmtree(temp_dir)
            return

        shutil.move(temp_dir, target_dir)
        install_dependencies(options["dependencies"], target_dir)

        if options["autorun"] and options["launch_file"]:
            autorun_file = target_dir / options["launch_file"]
            if autorun_file.exists() and add_to_autostart(pkg_name, autorun_file):
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É: {autorun_file}")

        execute_commands(options["commands"], target_dir)

        if options["launch_file"]:
            launch_path = target_dir / options["launch_file"]
            if launch_path.exists():
                print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {options['launch_file']}...")
                if platform.system() == "Windows":
                    os.startfile(launch_path)
                else:
                    subprocess.run(["open" if sys.platform == "darwin" else "xdg-open", str(launch_path)])

        save_package_info(pkg_name, repo_url)
        print(f"‚úÖ –ü–∞–∫–µ—Ç '{pkg_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {target_dir}")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if 'temp_dir' in locals() and temp_dir.exists():
            shutil.rmtree(temp_dir, ignore_errors=True)


def uninstall_package(name: str):
    try:
        packages = get_installed_packages()
        if name not in packages:
            print(f"‚ùå –ü–∞–∫–µ—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        pkg_path = Path(packages[name]["path"])
        remove_from_autostart(name)

        if not pkg_path.exists():
            print(f"‚ÑπÔ∏è –ü–∞–ø–∫–∞ –ø–∞–∫–µ—Ç–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")
            del packages[name]
            with open(PACKAGES_JSON, 'w') as f:
                json.dump(packages, f, indent=4)
            return

        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ '{name}'...")
        if force_remove(pkg_path):
            del packages[name]
            with open(PACKAGES_JSON, 'w') as f:
                json.dump(packages, f, indent=4)
            print(f"‚úÖ –ü–∞–∫–µ—Ç —É–¥–∞–ª—ë–Ω!")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é:\n{pkg_path}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")


def list_packages():
    packages = get_installed_packages()
    if not packages:
        print("üì¶ –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤")
    else:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for name, info in packages.items():
            print(f"  ‚Ä¢ {name} ({info['repo_url']})")
            print(f"    üìÅ {info['path']}")
            print(f"    ‚è±Ô∏è {info.get('installed_at', '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")


if __name__ == "__main__":
    setup_environment()

    if len(sys.argv) < 2:
        print_help()
        sys.exit(1)

    cmd = sys.argv[1].lower()

    if cmd == "install" and len(sys.argv) >= 3:
        repo = sys.argv[2]
        name = sys.argv[4] if len(sys.argv) > 4 and sys.argv[3] == "--name" else None
        install_package(repo, name)
    elif cmd == "uninstall" and len(sys.argv) >= 3:
        uninstall_package(sys.argv[2])
    elif cmd == "list":
        list_packages()
    elif cmd in ("help", "--help", "-h"):
        print_help()
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        print_help()
        sys.exit(1)