import os
import sys
import platform
from pathlib import Path
import json
import shutil
import stat
import time
import requests
import zipfile
from typing import Optional
from urllib.parse import urlparse

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ALLOWED_ORG = "Liqueur-Manager"
BASE_GITHUB_URL = "https://github.com"
API_URL = f"https://api.github.com/repos/{ALLOWED_ORG}"
PACKAGES_DIR = Path("/Liqueur_Packages") if platform.system() != "Windows" else Path("C:/Liqueur_Packages")
PACKAGES_JSON = PACKAGES_DIR / "packages.json"


def download_repo(repo_name: str, target_dir: Path) -> bool:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–∞–∫ zip-–∞—Ä—Ö–∏–≤ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç"""
    try:
        url = f"{BASE_GITHUB_URL}/{ALLOWED_ORG}/{repo_name}/archive/refs/heads/main.zip"
        response = requests.get(url, stream=True)
        response.raise_for_status()

        zip_path = target_dir.with_suffix('.zip')

        with open(zip_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)

        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(target_dir.parent)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É (github –¥–æ–±–∞–≤–ª—è–µ—Ç '-main' –∫ –∏–º–µ–Ω–∏)
        extracted_dir = target_dir.parent / f"{repo_name}-main"
        if extracted_dir.exists():
            extracted_dir.rename(target_dir)

        zip_path.unlink()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        if zip_path.exists():
            zip_path.unlink()
        return False


def force_remove(path: Path, retries: int = 3, delay: float = 1.0) -> bool:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(retries):
        try:
            for root, dirs, files in os.walk(path):
                for name in files:
                    file_path = Path(root) / name
                    file_path.chmod(stat.S_IWRITE)
                for name in dirs:
                    dir_path = Path(root) / name
                    dir_path.chmod(stat.S_IWRITE)
            shutil.rmtree(path)
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
            time.sleep(delay)

    try:
        shutil.rmtree(path, ignore_errors=True)
        return True
    except:
        return False


def validate_repo_url(repo_url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        parsed = urlparse(repo_url)
        if not parsed.netloc.endswith("github.com"):
            return False

        path_parts = parsed.path.strip("/").split("/")
        return len(path_parts) >= 2 and path_parts[0] == ALLOWED_ORG
    except:
        return False


def normalize_repo_url(repo_input: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    if repo_input.startswith(("http://", "https://")):
        return repo_input
    return f"{BASE_GITHUB_URL}/{ALLOWED_ORG}/{repo_input}"


def setup_environment():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á—É—é —Å—Ä–µ–¥—É"""
    try:
        PACKAGES_DIR.mkdir(exist_ok=True, parents=True)
        if not PACKAGES_JSON.exists():
            with open(PACKAGES_JSON, 'w') as f:
                json.dump({}, f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)


def get_installed_packages() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    try:
        with open(PACKAGES_JSON, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_package_info(name: str, repo_url: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞"""
    packages = get_installed_packages()
    packages[name] = {
        "repo_url": repo_url,
        "path": str(PACKAGES_DIR / name),
        "installed_at": time.strftime("%Y-%m-%d %H:%M:%S")
    }
    with open(PACKAGES_JSON, 'w') as f:
        json.dump(packages, f, indent=4)


def install_package(repo_input: str, name: Optional[str] = None):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    try:
        repo_url = normalize_repo_url(repo_input)

        if not validate_repo_url(repo_url):
            print(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å {ALLOWED_ORG}")
            return

        repo_name = repo_url.split("/")[-1]
        pkg_name = name if name else repo_name
        target_dir = PACKAGES_DIR / pkg_name

        if target_dir.exists():
            print(f"‚ö†Ô∏è –ü–∞–∫–µ—Ç '{pkg_name}' —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return

        print(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ '{pkg_name}' –∏–∑ {repo_url}...")

        if not download_repo(repo_name, target_dir):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø–∞–∫–µ—Ç")
            return

        save_package_info(pkg_name, repo_url)
        print(f"‚úÖ –ü–∞–∫–µ—Ç '{pkg_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {target_dir}")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


def uninstall_package(name: str):
    """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç"""
    try:
        packages = get_installed_packages()

        if name not in packages:
            print(f"‚ùå –ü–∞–∫–µ—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        pkg_path = Path(packages[name]["path"])

        if not pkg_path.exists():
            print(f"‚ÑπÔ∏è –ü–∞–ø–∫–∞ –ø–∞–∫–µ—Ç–∞ '{name}' —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")
            del packages[name]
            with open(PACKAGES_JSON, 'w') as f:
                json.dump(packages, f, indent=4)
            return

        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ '{name}'...")

        if force_remove(pkg_path):
            del packages[name]
            with open(PACKAGES_JSON, 'w') as f:
                json.dump(packages, f, indent=4)
            print(f"‚úÖ –ü–∞–∫–µ—Ç '{name}' —É–¥–∞–ª—ë–Ω!")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å '{name}' –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            print("–°–æ–≤–µ—Ç—ã:")
            print(f"1. –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ {pkg_path}")
            print(f"2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: rmdir /s /q \"{pkg_path}\"")
            print(f"3. –£–¥–∞–ª–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")


def list_packages():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    packages = get_installed_packages()
    if not packages:
        print("üì¶ –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤")
    else:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for name, info in packages.items():
            print(f"  ‚Ä¢ {name} ({info['repo_url']})")
            print(f"    üìÅ {info['path']}")
            print(f"    ‚è±Ô∏è {info.get('installed_at', '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")


def print_help():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("\nLiqueur Package Manager")
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print(f"  install <–∏–º—è_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç –∏–∑ {ALLOWED_ORG}")
    print("  uninstall <–∏–º—è_–ø–∞–∫–µ—Ç–∞>     - –£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç")
    print("  list                      - –ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã")
    print("\n–ü—Ä–∏–º–µ—Ä—ã:")
    print(f"  {sys.argv[0]} install Liqueur")
    print(f"  {sys.argv[0]} uninstall Liqueur")


if __name__ == "__main__":
    setup_environment()

    if len(sys.argv) < 2:
        print_help()
        sys.exit(1)

    cmd = sys.argv[1].lower()

    if cmd == "install" and len(sys.argv) >= 3:
        repo = sys.argv[2]
        name = sys.argv[3] if len(sys.argv) >= 4 and sys.argv[2] == "--name" else None
        install_package(repo, name)
    elif cmd == "uninstall" and len(sys.argv) >= 3:
        uninstall_package(sys.argv[2])
    elif cmd == "list":
        list_packages()
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        print_help()
        sys.exit(1)